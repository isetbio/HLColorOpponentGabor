%% t_colorGaborDetectFindThresholds
% Classify data generated by t_colorGaborConeCurrentEyeMovementsResponseInstances
%
% 7/11/16  npc Wrote it.

%% Initialize
ieInit; clear; close all;

% Add project toolbox to Matlab path
AddToMatlabPathDynamically(fullfile(fileparts(which(mfilename)),'../toolbox')); 

%% Define parameters of analysis
%
% signal source: select between 'photocurrents' and 'isomerizations'
signalSource = 'photocurrents';

dataDir = colorGaborDetectDataDir();
fprintf('\nLoading data  from %s ...\n', dataDir);
fileName = fullfile(dataDir, 'colorGaborDetectResponses.mat');
load(fileName);

nTrials = numel(theNoStimData.responseInstanceArray);


% Enter the zero contrast response instances
responseVector = theNoStimData.responseInstanceArray(1).theMosaicPhotoCurrents(:);
for iTrial = 1:nTrials
    fprintf('\nLoading null stimulus data from %d trial into design matrix %s ...\n', iTrial);
    if (iTrial == 1)
        data = zeros(2*nTrials, numel(responseVector));
        classes = zeros(2*nTrials, 1);
    end
    if (strcmp(signalSource,'photocurrents'))
        data(iTrial,:) = theNoStimData.responseInstanceArray(iTrial).theMosaicPhotoCurrents(:);
    else
        data(iTrial,:) = theNoStimData.responseInstanceArray(iTrial).theMosaicIsomerizations(:);
    end
    classes(iTrial,1) = 0;
end
clear 'theNoStimData'

% Enter the stimulus response instances
for testChromaticDirectionIndex = 1:size(testConeContrasts,2)
    for testContrastIndex = 1:numel(testContrasts)
        for iTrial = 1:nTrials
            fprintf('\nLoading (%d,%d) stimulus data from %d trial into design matrix %s ...\n', testChromaticDirectionIndex, testContrastIndex, iTrial);
            if (strcmp(signalSource,'photocurrents'))
                data(nTrials+iTrial,:) = theStimData{testChromaticDirectionIndex, testContrastIndex}.responseInstanceArray(iTrial).theMosaicPhotoCurrents(:);
            else
                data(nTrials+iTrial,:) = theStimData{testChromaticDirectionIndex, testContrastIndex}.responseInstanceArray(iTrial).theMosaicIsomerizations(:);
            end
            classes(nTrials+iTrial,1) = 1;
        end
        % Perform SVM classification for this stimulus vs the zero contrast stimulus
        fprintf('Running SVM for chromatic direction %d, contrast %2.2f ...', testChromaticDirectionIndex , testContrasts(testContrastIndex));
        [percentCorrect(testChromaticDirectionIndex, testContrastIndex), stdErr(testChromaticDirectionIndex, testContrastIndex)] = classifyWithSVM(data,classes);
        fprintf('% correct: %2.2f\n', percentCorrect(testChromaticDirectionIndex, testContrastIndex));
    end
end

% Plot performances
hFig = figure(1); clf;
set(hFig, 'Position', [10 10 680 590], 'Color', [1 1 1]);
for testChromaticDirectionIndex = 1:size(testConeContrasts,2)
    subplot(1,size(testConeContrasts,2), testChromaticDirectionIndex)
    errorbar(testContrasts, squeeze(percentCorrect(testChromaticDirectionIndex,:)), squeeze(stdErr(testChromaticDirectionIndex, :)), ...
        'ro-', 'LineWidth', 2.0, 'MarkerSize', 12, 'MarkerFaceColor', [1.0 0.5 0.50]);
    set(gca, 'YLim', [0 1.0],'XLim', [testContrasts(1) testContrasts(end)], 'FontSize', 14);
    xlabel('contrast', 'FontSize' ,16, 'FontWeight', 'bold');
    ylabel('percent correct', 'FontSize' ,16, 'FontWeight', 'bold');
    box off; grid on
    title(sprintf('LMS = [%2.2f %2.2f %2.2f]', testConeContrasts(1,testChromaticDirectionIndex), testConeContrasts(2,testChromaticDirectionIndex), testConeContrasts(3,testChromaticDirectionIndex)));
end




